// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.sheet_music_app.pigeon

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class Pitch(val raw: Int) {
  A0(0),
  B0(1),
  C1(2),
  D1(3),
  E1(4),
  F1(5),
  G1(6),
  A1(7),
  B1(8),
  C2(9),
  D2(10),
  E2(11),
  F2(12),
  G2(13),
  A2(14),
  B2(15),
  C3(16),
  D3(17),
  E3(18),
  F3(19),
  G3(20),
  A3(21),
  B3(22),
  C4(23),
  D4(24),
  E4(25),
  F4(26),
  G4(27),
  A4(28),
  B4(29),
  C5(30),
  D5(31),
  E5(32),
  F5(33),
  G5(34),
  A5(35),
  B5(36),
  C6(37),
  D6(38),
  E6(39),
  F6(40),
  G6(41),
  A6(42),
  B6(43),
  C7(44),
  D7(45),
  E7(46),
  F7(47),
  G7(48),
  A7(49),
  B7(50),
  C8(51);

  companion object {
    fun ofRaw(raw: Int): Pitch? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class Length(val raw: Int) {
  BREVE(0),
  SEMIBREVE(1),
  MINIM(2),
  CROTCHET(3),
  QUAVER(4),
  SEMIQUAVER(5),
  DEMISEMIQUAVER(6),
  HEMIDEMISEMIQUAVER(7);

  companion object {
    fun ofRaw(raw: Int): Length? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Note (
  val pitch: Pitch,
  val length: Length

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): Note {
      val pitch = Pitch.ofRaw(list[0] as Int)!!
      val length = Length.ofRaw(list[1] as Int)!!
      return Note(pitch, length)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      pitch.raw,
      length.raw,
    )
  }
}
@Suppress("UNCHECKED_CAST")
private object ScannerAPICodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Note.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Note -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface ScannerAPI {
  fun scan(imagePath: String): List<Note>

  companion object {
    /** The codec used by ScannerAPI. */
    val codec: MessageCodec<Any?> by lazy {
      ScannerAPICodec
    }
    /** Sets up an instance of `ScannerAPI` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: ScannerAPI?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.sheet_music_app.ScannerAPI.scan", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val imagePathArg = args[0] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.scan(imagePathArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
